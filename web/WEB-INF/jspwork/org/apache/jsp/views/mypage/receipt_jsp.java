/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-08-11 11:38:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.mypage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import receipt.model.vo.*;
import java.sql.Date;

public final class receipt_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("receipt.model.vo");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	Receipt receipt = (Receipt) request.getAttribute("receipt");

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>영수증</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t*:not(table):not(div):not(tr):not(td):not(button):not(h4) {\r\n");
      out.write("\t\tmargin: 0px; \r\n");
      out.write("\t\tpadding: 0px;\r\n");
      out.write("\t}\r\n");
      out.write("\tp {\r\n");
      out.write("\t\tfont-size: 10pt;\r\n");
      out.write("\t}\r\n");
      out.write("\th4 {\r\n");
      out.write("\t\tmargin:10px 0px 5px 0px;\r\n");
      out.write("\t}\r\n");
      out.write("\ttable tr td {\r\n");
      out.write("\t\tborder-top: 1px solid #4C4C4C;\r\n");
      out.write("\t\tborder-bottom: 1px solid #4C4C4C;\r\n");
      out.write("\t}\r\n");
      out.write("\ttable {\r\n");
      out.write("\t\tmargin: auto;\r\n");
      out.write("\t\twidth: 90%;\r\n");
      out.write("\t\tborder-collapse: collapse;\r\n");
      out.write("\t}\r\n");
      out.write("\ttd:first {\r\n");
      out.write("\t\tbackground: gray;\r\n");
      out.write("\t}\r\n");
      out.write("\t.c_top {\r\n");
      out.write("\t\tbackground-color: #E74C3C;\r\n");
      out.write("\t\tpadding:5px;\r\n");
      out.write("\t\tcolor: white;\r\n");
      out.write("\t}\r\n");
      out.write("\t.c_contents {\r\n");
      out.write("\t\tmargin: 15px;\r\n");
      out.write("\t\twidth: 600px;\r\n");
      out.write("\t}\r\n");
      out.write("\t.c_center {\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"c_top\">\r\n");
      out.write("\t\t<h3>결제 영수증</h3>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"c_contents\">\t\r\n");
      out.write("\t\t<p>1. 결제영수증은 소득공제용 영수증 및 매입 세금계산서로 활용할 수 없으며,</p>\r\n");
      out.write("\t\t<p>   결제가 완료되었음을 증명하는 용도로만 활용가능합니다.</p>\r\n");
      out.write("\t\t<p>   결제영수증은 세무상의 지출증빙 효력이 없습니다.</p>\r\n");
      out.write("\t\t<p>2. 결제영수증은 선결제 배송비를 포함하여 실제 결제액에 대하여 발급됩니다.</p>\r\n");
      out.write("\t\t<p>3. 전세계배송 주문의 경우 예상해외배송비까지 추가된 금액입니다. </p>\r\n");
      out.write("\t\t<p>   단, 추가해외배송비는 '나의11번가 > 증빙서류 발급 > 배송비 탭' 에서 확인하실 수 있습니다.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h4>주문정보</h4>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr><td style=\"background-color:#ccc;\">주문일</td><td>");
      out.print( receipt.getOrderDate() );
      out.write("</td><td style=\"background-color:#ccc;\">주문번호</td><td>");
      out.print( receipt.getOrderCode() );
      out.write("</td></tr>\r\n");
      out.write("\t\t\t<tr><td style=\"background-color:#ccc;\">주문인</td><td colspan=\"3\">");
      out.print( receipt.getMemberName() );
      out.write("</td></tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h4>구매상품</h4>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr><td style=\"background-color:#ccc;\">상품/옵션정보</td><td style=\"background-color:#ccc;\">수량</td><td style=\"background-color:#ccc;\">결제금액</td></tr>\r\n");
      out.write("\t\t\t<tr><td>");
      out.print( receipt.getTitle() );
      out.write("</td><td>");
      out.print( receipt.getOrderCount() );
      out.write("</td><td>");
      out.print( receipt.getPrice() );
      out.write("</td></tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div style=\"background:#EAEAEA;\">\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<img alt=\"\" src=\"/made/images/logo.png\" style=\"margin:15px; width:163x; height:50px;\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<p>상호명 : MADE</p>\r\n");
      out.write("\t\t\t\t<p>사업자등록번호 : 000-00-00000</p>\r\n");
      out.write("\t\t\t\t<p>소재지 : 서울특별시 강남구 역삼1동</p>\r\n");
      out.write("\t\t\t\t<p>대표자 : 유○○</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<p style=\"color:#E74C3C;\">정상적으로 출력되지 않는다면 도구 인터넷옵션 고급탭에서 인쇄메뉴 중 '배경색 및 이미지 인쇄'를 체크하시기 바랍니다.</p>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div class=\"c_center\" style=\"clear:left; display:block\">\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"javascript:print();\">인쇄하기</button>&nbsp;&nbsp;&nbsp;<button type=\"button\" onclick=\"javascript:window.close();\">닫기</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
